import subprocess
import shutil
from pathlib import Path
import os
import requests
from File_Handling import scan_latest_sboms
from Variables import kev_catalog, kev_url

def update_grype_kev_db():
    print("[~] Warming up (may take a few seconds)...")
    update_grype_db()
    update_kev_db()
    scan_latest_sboms()

def update_grype_db():
    cache_path = Path.home() / ".cache" / "grype"
    backup_path = Path.home() / ".cache" / "grype_backup"

    # Rename cache to become a backup
    if cache_path.exists():
        print("[~] Backing up existing grype cache...")
        if backup_path.exists():
            shutil.rmtree(backup_path, ignore_errors=True)
        cache_path.rename(backup_path)

    try:
        print("[~] Updating grype DB...")
        subprocess.run(["grype", "db", "update"], check=True)
        print("[✓] Grype DB update successful.")

        # Delete backup
        if backup_path.exists():
            print("[~] Removing backup cache...")
            shutil.rmtree(backup_path, ignore_errors=True)

    except subprocess.CalledProcessError as e:
        print(f"[!] Grype DB update failed: {e.stderr}")

        # Restore backup cache if update failed
        if backup_path.exists():
            print("[~] Restoring backup cache...")
            if cache_path.exists():
                shutil.rmtree(cache_path, ignore_errors=True)
            backup_path.rename(cache_path)
        else:
            print("[!] No backup cache to restore.")

def update_kev_db():
    try:
        response = requests.head(kev_url, timeout=30)
        # If kev url is reachable it updates
        if response.status_code == 200:
            print("[~] KEV Catalog is reachable, updating...")
            if os.path.exists(kev_catalog):
                print("[~] Removing old KEV Catalog...")
                os.remove(kev_catalog)
            response = requests.get(kev_url, timeout=30)
            with open(kev_catalog, "wb") as f:
                f.write(response.content)
            print("[✓] KEV Catalog updated.")
        # If kev url isnt just prints an error and carries on
        else:
            print(f"[!] KEV Catalog not reachable, status code: {response.status_code}")
    except requests.RequestException as e:
        print(f"[!] Failed to reach KEV Catalog: {e}")